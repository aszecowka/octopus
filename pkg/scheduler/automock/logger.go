// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import logr "github.com/go-logr/logr"
import mock "github.com/stretchr/testify/mock"

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Enabled provides a mock function with given fields:
func (_m *Logger) Enabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Error provides a mock function with given fields: err, msg, keysAndValues
func (_m *Logger) Error(err error, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Info(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// V provides a mock function with given fields: level
func (_m *Logger) V(level int) logr.InfoLogger {
	ret := _m.Called(level)

	var r0 logr.InfoLogger
	if rf, ok := ret.Get(0).(func(int) logr.InfoLogger); ok {
		r0 = rf(level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logr.InfoLogger)
		}
	}

	return r0
}

// WithName provides a mock function with given fields: name
func (_m *Logger) WithName(name string) logr.Logger {
	ret := _m.Called(name)

	var r0 logr.Logger
	if rf, ok := ret.Get(0).(func(string) logr.Logger); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logr.Logger)
		}
	}

	return r0
}

// WithValues provides a mock function with given fields: keysAndValues
func (_m *Logger) WithValues(keysAndValues ...interface{}) logr.Logger {
	var _ca []interface{}
	_ca = append(_ca, keysAndValues...)
	ret := _m.Called(_ca...)

	var r0 logr.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) logr.Logger); ok {
		r0 = rf(keysAndValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logr.Logger)
		}
	}

	return r0
}
